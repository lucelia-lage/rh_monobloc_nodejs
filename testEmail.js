require('dotenv').config();
const nodemailer = require('nodemailer');

const testEmailConfiguration = async () => {
  console.log(' Test de configuration email...\n');
  
  // 1. VÃ©rifier les variables d'environnement
  console.log('ðŸ“‹ Variables d\'environnement :');
  console.log('EMAIL_USER:', process.env.EMAIL_USER);
  console.log('EMAIL_PASS:', process.env.EMAIL_PASS ? '***masquÃ©***' : 'NON DÃ‰FINI');
  console.log('APP_URL:', process.env.APP_URL);
  
  if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
    console.log(' Variables EMAIL_USER ou EMAIL_PASS manquantes !');
    return;
  }
  
  // 2. CrÃ©er le transporteur
  console.log(' CrÃ©ation du transporteur...');
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });
  
  // 3. Tester la connexion
  console.log('Test de connexion...');
  try {
    await transporter.verify();
    console.log('Connexion rÃ©ussie !');
  } catch (error) {
    console.log('Erreur de connexion:', error.message);
    return;
  }
  
  // 4. Envoyer un email de test
  console.log('Envoi d\'un email de test...');
  try {
    const info = await transporter.sendMail({
      from: {
        name: 'RHelp You Test',
        address: process.env.EMAIL_USER
      },
      to: process.env.EMAIL_USER,
      subject: 'ðŸ§ª Test de configuration email',
      html: `
        <h2>ðŸŽ‰ Test rÃ©ussi !</h2>
        <p>Votre configuration email fonctionne correctement.</p>
        <p><strong>Date :</strong> ${new Date().toLocaleString()}</p>
        <p><strong>Serveur :</strong> Gmail</p>
      `,
      text: `
        ðŸŽ‰ Test rÃ©ussi !
        
        Votre configuration email fonctionne correctement.
        Date : ${new Date().toLocaleString()}
        Serveur : Gmail
      `
    });
    
    console.log('Email de test envoyÃ© avec succÃ¨s !');
    console.log('Message ID:', info.messageId);
    console.log('VÃ©rifiez votre boite email');
    
  } catch (error) {
    console.log('Erreur lors de l\'envoi:', error.message);
    console.log('DÃ©tails de l\'erreur:', error);
  }
};

// Fonction pour tester diffÃ©rents fournisseurs
const testAlternativeProviders = async () => {
  console.log('Test avec d\'autres fournisseurs...');
  
  // Test avec configuration SMTP gÃ©nÃ©rique
  const alternativeTransporter = nodemailer.createTransport({
    host: 'smtp.gmail.com',
    port: 587,
    secure: false,
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });
  
  try {
    await alternativeTransporter.verify();
    console.log('Configuration SMTP alternative rÃ©ussie !');
  } catch (error) {
    console.log('Configuration SMTP alternative Ã©chouÃ©e:', error.message);
  }
};

// ExÃ©cuter les tests
const runAllTests = async () => {
  console.log('DÃ©marrage des tests email...\n');
  
  await testEmailConfiguration();
  await testAlternativeProviders();
  
  console.log('Tests terminÃ©s !');
  console.log('Conseils si Ã§a ne fonctionne pas :');
  console.log('1. VÃ©rifiez que l\'authentification Ã  2 facteurs est activÃ©e sur Gmail');
  console.log('2. Utilisez un "Mot de passe d\'application" et non votre mot de passe Gmail');
  console.log('3. VÃ©rifiez que votre compte Gmail autorise les applications moins sÃ©curisÃ©es');
  console.log('4. Essayez avec un autre fournisseur email (Outlook, Yahoo, etc.)');
};

// Lancer les tests
runAllTests().catch(console.error);